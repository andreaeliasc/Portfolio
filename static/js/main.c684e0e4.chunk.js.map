{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["requestAnimationFrame","window","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","flakes","canvas","document","getElementById","ctx","getContext","snow","clearRect","width","height","i","flake","x","y","x2","y2","dist","Math","sqrt","xcomp","ycomp","deltaV","velX","velY","speed","cos","step","stepSize","fillStyle","opacity","reset","beginPath","arc","size","PI","fill","floor","random","innerWidth","innerHeight","push","init","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c684e0e4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n(function() {\n  var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame ||\n  function(callback) {\n      window.setTimeout(callback, 1000 / 60);\n  };\n  window.requestAnimationFrame = requestAnimationFrame;\n})();\n\n\nvar flakes = [],\n  canvas = document.getElementById(\"canvas\"),\n  ctx = canvas.getContext(\"2d\"),\n  flakeCount = 400,\n  mX = -100,\n  mY = -100\n\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\nfunction snow() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (var i = 0; i < flakeCount; i++) {\n      var flake = flakes[i],\n          x = mX,\n          y = mY,\n          minDist = 150,\n          x2 = flake.x,\n          y2 = flake.y;\n\n      var dist = Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y)),\n          dx = x2 - x,\n          dy = y2 - y;\n\n      if (dist < minDist) {\n          var force = minDist / (dist * dist),\n              xcomp = (x - x2) / dist,\n              ycomp = (y - y2) / dist,\n              deltaV = force / 2;\n\n          flake.velX -= deltaV * xcomp;\n          flake.velY -= deltaV * ycomp;\n\n      } else {\n          flake.velX *= .98;\n          if (flake.velY <= flake.speed) {\n              flake.velY = flake.speed\n          }\n          flake.velX += Math.cos(flake.step += .05) * flake.stepSize;\n      }\n\n      ctx.fillStyle = \"rgba(255,255,255,\" + flake.opacity + \")\";\n      flake.y += flake.velY;\n      flake.x += flake.velX;\n          \n      if (flake.y >= canvas.height || flake.y <= 0) {\n          reset(flake);\n      }\n\n\n      if (flake.x >= canvas.width || flake.x <= 0) {\n          reset(flake);\n      }\n\n      ctx.beginPath();\n      ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\n      ctx.fill();\n  }\n  requestAnimationFrame(snow);\n};\n\nfunction reset(flake) {\n  flake.x = Math.floor(Math.random() * canvas.width);\n  flake.y = 0;\n  flake.size = (Math.random() * 3) + 2;\n  flake.speed = (Math.random() * 1) + 0.5;\n  flake.velY = flake.speed;\n  flake.velX = 0;\n  flake.opacity = (Math.random() * 0.5) + 0.3;\n}\n\nfunction init() {\n  for (var i = 0; i < flakeCount; i++) {\n      var x = Math.floor(Math.random() * canvas.width),\n          y = Math.floor(Math.random() * canvas.height),\n          size = (Math.random() * 3) + 2,\n          speed = (Math.random() * 1) + 0.5,\n          opacity = (Math.random() * 0.5) + 0.3;\n\n      flakes.push({\n          speed: speed,\n          velY: speed,\n          velX: 0,\n          x: x,\n          y: y,\n          size: size,\n          stepSize: (Math.random()) / 30,\n          step: 0,\n          opacity: opacity\n      });\n  }\n\n  snow();\n};\n\n\ninit();\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}